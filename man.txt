/*
drop table DistinguerProfessionnel;
drop table DistinguerFilm;
drop table Distinguer;
drop table Distinction;
drop table Participer;
drop table Sous_titrer;
drop table Vocaliser;
drop table Langue;
drop table LouerPhys;
drop table Physique;
drop table LouerNum;
drop table Numérique;
drop table Version;
drop table Film;
drop table Professionnel;
drop table Abonné;
drop table Abonnement;
drop table Personne;
*/

Create table Personne(
  Nom                varchar(25),
  Prenom            Varchar(25),
  DateNaiss            date check(DateNaiss <= getdate()),
  Primary Key(Nom, Prenom, DateNaiss)
);
Create table Abonnement(
  Nom                varchar(25) primary key,
  Prix                smallint,
  LocationMax        smallint,
  DureeLoc            integer
);
Create table Abonné(
  Numero            smallint Unique,
  Adresse            varchar(52),
  Téléphone            integer,
  Renouvellement    date,
  Ancienneté        smallint,
  Politique            tinyint,
  Nom                varchar(25),
  Prenom            varchar(25),
  DateNaiss            date check((YEAR(getdate()) - YEAR(DateNaiss)) >= 6),
  Nom_Abonnement    varchar(25),
  primary key (Nom,Prenom,DateNaiss),
  Constraint fk1_abonne Foreign key(Nom, Prenom, DateNaiss) references Personne(Nom, Prenom, DateNaiss)    on delete cascade,
  Constraint fk2_abonne Foreign key (Nom_Abonnement) references Abonnement(Nom) on update cascade on delete set NULL
);
Create table Professionnel(
  Filmographie        text,
  Biographie        text,
  Caractéristique    text,
  Nom                varchar(25),
  Prenom            varchar(25),
  DateNaiss            date check(DateNaiss <= getdate()),
  primary key (Nom, Prenom, DateNaiss),
  Constraint fk1_pro Foreign key(Nom, Prenom, DateNaiss) references Personne(Nom, Prenom, DateNaiss) on delete cascade
);
Create table Film(
  TitreVF            varchar(52) primary key,
  TitreVO            varchar(52),
  Site                varchar(25),
  Generique            text,
  Resume            text,
  VO                varchar(25) 
);
Create table Version(
  DateV                date NOT NULL check(DateV <= getdate()),
  Pays                varchar(25) NOT NULL ,
  Edition            varchar(25) NOT NULL ,
  DRM                varchar(25) ,
  PEGI                tinyint check(PEGI <= 18),
  Duree                time,
  TitreVF            varchar(52) NOT NULL,
  PRIMARY KEY (TitreVF, DateV ,Pays ,Edition),
  constraint fk1_version foreign key (TitreVF) references Film(TitreVf) on update cascade on delete cascade 
);  
Create table Numérique(
  TitreVF            varchar(52),
  Prix                 smallint,
  DateV                date,
  Pays                varchar(25),
  Edition            varchar(25),
  primary key (TitreVF,DateV,Pays,Edition),
  constraint fk1_Numérique foreign key (TitreVF,DateV,Pays,Edition) references Version(TitreVF,DateV,Pays,Edition) on update cascade on delete cascade 
);
Create table LouerNum(
  DateDebut            date check(DateDebut <= getdate()),
  DateFin            date,
  TitreVF            varchar(52),
  DateV                date,
  Pays                varchar(25),
  Edition            varchar(25),
  Nom                varchar(25),
  Prenom            varchar(25),
  DateNaiss            date,
  Force             Integer Default(0),
  constraint checkNum check(DateFin > DateDebut),
  constraint fk1_LouerNum foreign key (Nom,Prenom,DateNaiss) references Abonné(Nom,Prenom,DateNaiss) on update cascade on delete set NULL,
  constraint fk2_LouerNum foreign key (TitreVF,DateV,Pays,Edition) references Numérique(TitreVF,DateV,Pays,Edition) on update no action on delete cascade
);
Create table Physique(
  id                smallint,
  TitreVF            varchar(52),
  Etat                tinyint,
  Support            varchar(25),
  Prix                float,
  DateV                date,
  Pays                varchar(25) ,
  Edition            varchar(25),
  primary key(id,Pays,DateV,Edition,TitreVF),
  constraint fk1_Physique foreign key (TitreVF,DateV,Pays,Edition) references Version(TitreVF,DateV,Pays,Edition) on update cascade on delete no action
);         
Create table LouerPhys(
  DateDebut            date check(DateDebut <= getdate()),
  DateFin            date ,
  id                smallint,
  TitreVF            varchar(52),
  DateV                date,
  Pays                varchar(25),
  Edition            varchar(25),
  Nom                 varchar(25),
  Prenom            varchar(25),
  DateNaiss         date,
  Force             Integer Default(0),
  constraint checkPhy check(DateFin > DateDebut),
  constraint fk1_LouerPhys foreign key (id,Pays,DateV,Edition,TitreVF) references Physique(id,Pays,DateV,Edition,TitreVF) on update no action on delete cascade,
  constraint fk2_LouerPhys foreign key (Nom,Prenom,DateNaiss) references Abonné(Nom,Prenom,DateNaiss) on update no action on delete set NULL
);

Create table Langue(
  Langue            varchar(25) primary key
);
Create table Vocaliser(
  DateV                date not null,
  Pays                varchar(25) not null,
  Edition            varchar(25) not null,
  TitreVF            varchar(52) NOT NULL ,
  Langue            varchar(25) NOT NULL ,
  constraint fk1_Vocaliser foreign key (TitreVF, DateV ,Pays ,Edition) references Version (TitreVF,DateV,Pays,Edition) on update cascade on delete no action,
  constraint fk2_Vocaliser foreign key (Langue) references langue(Langue) on update cascade on delete no action
);
Create table Sous_Titrer(
  Langue            varchar(25) NOT NULL ,
  DateV                date NOT NULL ,
  Pays                varchar(25) NOT NULL ,
  Edition            varchar(25) NOT NULL ,
  TitreVF            varchar(52) NOT NULL ,
  constraint fk1_Sous_Titrer foreign key (Langue) references langue(Langue) on update cascade on delete no action,
  constraint fk2_Sous_Titrer foreign key (TitreVF, DateV ,Pays ,Edition) references Version(TitreVF, DateV ,Pays ,Edition) on update cascade on delete no action
);
Create table Participer(
  Role              Varchar (25) ,
  TitreVF           Varchar (52) NOT NULL ,
  Nom               Varchar (25) NOT NULL ,
  Prenom            Varchar (25) NOT NULL ,
  DateNaiss         Date NOT NULL,
  constraint fk1_Participer foreign key (TitreVF) references Film(TitreVF) on update cascade on delete no action,
  constraint fk2_Participer foreign key (Nom,Prenom,DateNaiss) references Personne(Nom ,Prenom ,DateNaiss) on update cascade on delete no action
);
CREATE TABLE Distinction(
  Nom               varchar(25) NOT NULL ,
  Categorie         varchar(25) NOT NULL ,
  Lieu              varchar(25) NOT NULL ,
  constraint pk_Distinction PRIMARY KEY (Nom ,Categorie ,Lieu)
);
Create table Distinguer(
  DateD               date check(DateD <= getdate()),
  TitreVF             varchar(52) NOT NULL ,
  Nom                 varchar(25) NOT NULL ,
  Prenom              varchar(25) NOT NULL ,
  DateNaiss           date NOT NULL,
  Nom_Distinction    varchar(25) NOT NULL ,
  Categorie           varchar(25) NOT NULL ,
  Lieu                varchar(25) NOT NULL ,
  constraint fk1_distinguer FOREIGN KEY (TitreVF) REFERENCES Film(TitreVF) on update cascade on delete no action,
  constraint fk2_distinguer FOREIGN KEY (Nom, Prenom, DateNaiss) REFERENCES Personne(Nom, Prenom, DateNaiss) on update cascade on delete no action,
  constraint fk3_distinguer FOREIGN KEY (Nom_Distinction,Categorie,Lieu) REFERENCES Distinction(Nom,Categorie,Lieu) on update cascade on delete no action
);
Create table DistinguerFilm(
  DateD                date check(DateD <= getdate()),
  TitreVF            varchar(52) NOT NULL ,
  Nom                varchar(25) NOT NULL ,
  Categorie            varchar(25) NOT NULL ,
  Lieu                varchar(25) NOT NULL ,
  constraint fk1_distinguerFilm FOREIGN KEY (TitreVF) REFERENCES Film(TitreVF) on update cascade on delete no action,
  constraint fk2_distinguerFilm FOREIGN KEY (Nom,Categorie,Lieu) REFERENCES Distinction(Nom,Categorie,Lieu) on update cascade on delete no action
);
Create table DistinguerProfessionnel(
  DateD                date check(DateD <= getdate()),
  Nom                varchar(25) NOT NULL ,
  Categorie            varchar(25) NOT NULL ,
  Lieu                varchar(25) NOT NULL ,
  Nom_Personne        varchar(25) NOT NULL ,
  Prenom            varchar(25) NOT NULL ,
  DateNaiss            date NOT NULL ,
  constraint fk1_distinguerPro FOREIGN KEY (Nom,Prenom,DateNaiss) REFERENCES Personne(Nom,Prenom,DateNaiss) on update cascade on delete no action,
  constraint fk2_distinguerPro FOREIGN KEY (Nom,Categorie,Lieu) REFERENCES Distinction(Nom,Categorie,Lieu) on update cascade on delete no action
);


////////////////////////////////////////
create type Numero_t from smallint;
create type Film_t from varchar(25);
create type Real_t from varchar(25);
create type Nom_t from varchar(25);
create type Prenom_t from varchar(25);
create type PEGI_t from tinyint;
create type TitreVF_t from varchar(52);
create type DateV_t from date;
create type Pays_t from varchar(25);
create type Edition_t from varchar(25);
create type nomDistinction_t from varchar(25);
create type annee_t from int;
create type prix_t from real;
create type dateNaiss_t from date;
create type id_t from smallint;
create type support_t from varchar(25);
/////////////
drop type Numero_t;
drop type Film_t;
drop type Real_t;
drop type Nom_t;
drop type Prenom_t;
drop type PEGI_t;
drop type TitreVF_t;
drop type DateV_t;
drop type Pays_t;
drop type Edition_t;
drop type nomDistinction_t;
drop type annee_t;
drop type prix_t;
drop type dateNaiss_t;
drop type id_t;
drop type support_t;
//////////////
drop procedure EstAbo
drop procedure AfficheEdition
drop procedure rachat
drop procedure PROCfilmNonLouable
drop procedure trending
/////////////
drop procedure EstAbo

create procedure EstAbo
@P_Prenom prenom_t, @P_Nom nom_t
AS
Declare @v_Numero Numero_t
Declare @true tinyint
set @true = 1;
Begin
	If (Exists (select * from Abonné where Nom=@P_Nom and Prenom = @P_Prenom))
		set @true = 0;
	Begin
		If @true=0
			begin
			set @v_Numero = (select Numero from Abonné where Nom=@P_Nom and Prenom = @P_Prenom);
			print ''+str(@v_Numero);
			end
		ELSE
			print 'Nup';
	End
End
///////////////////////////////
drop procedure AfficheEdition

create procedure AfficheEdition
@P_TitreVF TitreVF_t
AS
Declare @v_Edition Edition_t
Declare ListEdition CURSOR FOR
	Select Edition
	from Version
	where TitreVF = @P_TitreVF
BEGIN
	OPEN ListeEdition
	FETCH NEXT FROM ListeEdition into @v_Edition
	IF @@FETCH_STATUS <> 0
		print 'Aucune edition n''est repertoriée'
	ELSE
	BEGIN
		While @@FETCH_STATUS = 0
		Print @v_Edition
		FETCH NEXT FROM ListeEdition into @v_Edition
	END
CLOSE ListeEdition
DEALLOCATE ListeEdition

END
//////
drop procedure rachat

create procedure rachat 
@P_Id id_t
AS
Declare @v_Edition Edition_t
Declare @v_TitreVF TitreVF_t
Declare @v_Pays	Pays_t
Declare @v_DateV DateV_t
set @v_Edition = (Select Edition From Physique Where id = @P_Id);
set @v_TitreVF = (Select TitreVF From Physique where id = @P_Id);
set @v_Pays = (Select Pays From Physique Where id = @P_Id);
set @v_DateV = (Select DateV From Physique Where id = @P_Id);
Begin
delete From Physique Where id = @P_Id and Edition = @v_Edition and TitreVF = @v_TitreVF and Pays = @v_Pays and DateV = @v_DateV;
print'id suppr'
IF ((select COUNT(*) From Physique Where Edition = @v_Edition and TitreVF = @v_TitreVF and Pays = @v_Pays and DateV = @v_DateV)=0)
	Delete From Version Where Edition = @v_Edition and TitreVF = @v_TitreVF and Pays = @v_Pays and DateV = @v_DateV
	print'version suppr'
	Begin
	IF ((select COUNT(*) From Version Where @v_TitreVF = TitreVF)=0)
		print'film suppr'
		delete from Film Where  TitreVF =@v_TitreVF
	end
End
////////////
drop procedure PROCfilmNonLouable

create procedure PROCfilmNonLouable
AS 
Declare @v_Support support_t
Declare @v_TitreVF TitreVF_t
Declare @v_Date DateV_t
Declare @v_Pays Pays_t
Declare @v_Edition Edition_t
DECLARE C_Film CURSOR FOR
    select  Support, TitreVF, DateV, Pays, Edition 
    from Physique
    where Etat = 5;
begin
    open C_Film
    FETCH NEXT FROM C_Film into @v_Support, @v_TitreVF, @v_Date, @v_Pays, @v_Edition
    if @@FETCH_STATUS <> 0
        print 'Aucun Film non louable'
    Else
    Begin
        print 'Film non louable: '
        while @@FETCH_STATUS = 0
        Begin
            print @v_Support  + ' ' + @v_TitreVF + ' ' + CONVERT(varchar,@v_Date) +' ' + @v_Pays + ' ' + @v_Edition
            FETCH NEXT FROM C_Film into @v_Support, @v_TitreVF, @v_Date, @v_Pays, @v_Edition
        End
    end
    CLOSE C_Film
    DEALLOCATE C_Film
end
//////////////////////////////////
drop procedure trending

create procedure trending
AS
Declare @v_TitreVF TitreVF_t
Declare @v_count int
DECLARE C_FilmTrend CURSOR FOR
	select TitreVF, count(*)
    from LouerPhys
    group by TitreVF
	order by count(*) desc

Begin
	open C_FilmTrend
	FETCH NEXT FROM C_FilmTrend into @v_TitreVF, @v_count
    if @@FETCH_STATUS <> 0
        print 'Aucun Film trending'
    Else
		Begin
        print 'Film trending: '
        while @@FETCH_STATUS = 0
			Begin
            print left(@v_TitreVF + replicate('.',52),52) +': '+ convert(varchar, @v_count)
            FETCH NEXT FROM C_FilmTrend into @v_TitreVF, @v_count
			End
		end
    CLOSE C_FilmTrend
    DEALLOCATE C_FilmTrend
end
////////////////////
drop procedure durable

exec durable Asie VHS

create procedure durable 
AS
Declare @v_TitreVF TitreVF_t
Declare @v_avg int
DECLARE C_durable CURSOR FOR
	select TitreVF, avg(Etat)
    from Physique
    group by TitreVF
	order by count(Etat) 

Begin
	open C_durable
	FETCH NEXT FROM C_durable into @v_TitreVF, @v_avg
    if @@FETCH_STATUS <> 0
        print 'Aucun Film'
    Else
		Begin
        print 'Film trending: '
        while @@FETCH_STATUS = 0
			Begin
            print left(@v_TitreVF + replicate('.',52),52) +': '+ convert(varchar, @v_avg)
            FETCH NEXT FROM C_durable into @v_TitreVF, @v_avg
			End
		end
    CLOSE C_durable
    DEALLOCATE C_durable
end
/////////////////////////
drop procedure 
create procedure 
